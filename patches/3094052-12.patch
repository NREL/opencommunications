diff --git a/core/modules/file/file.module b/core/modules/file/file.module
index ed454f8df3..0dbf33d91c 100644
--- a/core/modules/file/file.module
+++ b/core/modules/file/file.module
@@ -990,7 +990,8 @@ function _file_save_upload_single(\SplFileInfo $file_info, $form_field_name, $va
   }
 
   //  Don't rename if 'allow_insecure_uploads' evaluates to TRUE.
-  if (!\Drupal::config('system.file')->get('allow_insecure_uploads')) {
+  $system_file_config = \Drupal::config('system.file');
+  if (!$system_file_config->get('allow_insecure_uploads')) {
     if (!empty($extensions)) {
       // Munge the filename to protect against possible malicious extension
       // hiding within an unknown file type (ie: filename.html.foo).
@@ -1042,10 +1043,26 @@ function _file_save_upload_single(\SplFileInfo $file_info, $form_field_name, $va
   if (substr($destination, -1) != '/') {
     $destination .= '/';
   }
+
+  $filename = $file->getFilename();
+  // If the transliteration option is enabled, transliterate the filename.
+  if ($system_file_config->get('filename_transliteration')) {
+    // Transliterate and sanitize the destination filename.
+    $filename = \Drupal::transliteration()->transliterate($filename, $file->language()->getId(), '');
+    // Replace whitespace.
+    $filename = str_replace(' ', '-', $filename);
+    // Remove remaining unsafe characters.
+    $filename = preg_replace('![^0-9A-Za-z_.-]!', '', $filename);
+    // Remove multiple consecutive non-alphabetical characters.
+    $filename = preg_replace('/(_)_+|(\.)\.+|(-)-+/', '\\1\\2\\3', $filename);
+    // Force lowercase to prevent issues on case-insensitive file systems.
+    $filename = mb_strtolower($filename);
+  }
+
   /** @var \Drupal\Core\File\FileSystemInterface $file_system */
   $file_system = \Drupal::service('file_system');
   try {
-    $file->destination = $file_system->getDestinationFilename($destination . $file->getFilename(), $replace);
+    $file->destination = $file_system->getDestinationFilename($destination . $filename, $replace);
   }
   catch (FileException $e) {
     \Drupal::messenger()->addError(t('The file %filename could not be uploaded because the name is invalid.', ['%filename' => $file->getFilename()]));
@@ -1089,6 +1106,10 @@ function _file_save_upload_single(\SplFileInfo $file_info, $form_field_name, $va
     return FALSE;
   }
 
+  // Update the filename with any changes as a result of transliteration or
+  // renaming due to an existing file.
+  $file->setFilename(\Drupal::service('file_system')->basename($file->destination));
+
   // Set the permissions on the new file.
   $file_system->chmod($file->getFileUri());
 
diff --git a/core/modules/file/tests/src/Functional/SaveUploadTest.php b/core/modules/file/tests/src/Functional/SaveUploadTest.php
index 11711958a2..21ed19b919 100644
--- a/core/modules/file/tests/src/Functional/SaveUploadTest.php
+++ b/core/modules/file/tests/src/Functional/SaveUploadTest.php
@@ -59,10 +59,17 @@ class SaveUploadTest extends FileManagedTestBase {
    */
   protected $imageExtension;
 
+  /**
+   * The user used by the test.
+   *
+   * @var \Drupal\user\Entity\User
+   */
+  protected $account;
+
   protected function setUp(): void {
     parent::setUp();
-    $account = $this->drupalCreateUser(['access site reports']);
-    $this->drupalLogin($account);
+    $this->account = $this->drupalCreateUser(['access site reports']);
+    $this->drupalLogin($this->account);
 
     $image_files = $this->drupalGetTestFiles('image');
     $this->image = File::create((array) current($image_files));
@@ -185,6 +192,48 @@ public function testDuplicate() {
     $this->assertEqual($max_fid_before_duplicate, $max_fid_after, 'A new managed file was not created.');
   }
 
+  /**
+   * Tests filename transliteration.
+   */
+  public function testTransliteration() {
+    $file = $this->generateFile('TEXT-Ãƒâ€¦Ã¢â‚¬Å“', 64, 5, 'text');
+
+    // Upload a file with a name with uppercase and unicode characters.
+    $edit = [
+      'files[file_test_upload]' => \Drupal::service('file_system')->realpath($file),
+      'extensions' => 'txt',
+      'is_image_file' => FALSE,
+    ];
+    $this->drupalPostForm('file-test/upload', $edit, t('Submit'));
+    $this->assertSession()->statusCodeEquals(200);
+    // Test that the file name has not been transliterated.
+    $this->assertSession()->responseContains('File name is TEXT-Ãƒâ€¦Ã¢â‚¬Å“.txt.');
+
+    // Enable transliteration via the UI.
+    $this->drupalLogin($this->rootUser);
+    $this->drupalPostForm('admin/config/media/file-system', ['filename_transliteration' => TRUE], 'Save configuration');
+    $this->drupalLogin($this->account);
+
+    // Upload a file with a name with uppercase and unicode characters.
+    $this->drupalPostForm('file-test/upload', $edit, t('Submit'));
+    $this->assertSession()->statusCodeEquals(200);
+    // Test that the file name has been transliterated.
+    $this->assertSession()->responseContains('File name is text-a.aeuoe.txt.');
+
+    // Generate another file with a name that will be changed when
+    // transliteration is on.
+    $file = $this->generateFile('S  Pace--ÃƒÂ°Ã…Â¸Ã¢â€žÂ¢Ã‹â€ ', 64, 5, 'text');
+    $edit = [
+      'files[file_test_upload]' => \Drupal::service('file_system')->realpath($file),
+      'extensions' => 'txt',
+      'is_image_file' => FALSE,
+    ];
+    $this->drupalPostForm('file-test/upload', $edit, t('Submit'));
+    $this->assertSession()->statusCodeEquals(200);
+    // Test that the file name has been transliterated.
+    $this->assertSession()->responseContains('File name is s-pace-adegaace.txt.');
+  }
+
   /**
    * Test extension handling.
    */
diff --git a/core/modules/system/config/install/system.file.yml b/core/modules/system/config/install/system.file.yml
index 02b376f454..f31139eb1b 100644
--- a/core/modules/system/config/install/system.file.yml
+++ b/core/modules/system/config/install/system.file.yml
@@ -1,3 +1,4 @@
 allow_insecure_uploads: false
 default_scheme: 'public'
 temporary_maximum_age: 21600
+filename_transliteration: false
diff --git a/core/modules/system/config/schema/system.schema.yml b/core/modules/system/config/schema/system.schema.yml
index e68bbae5a8..c958daf2cd 100644
--- a/core/modules/system/config/schema/system.schema.yml
+++ b/core/modules/system/config/schema/system.schema.yml
@@ -281,6 +281,9 @@ system.file:
     temporary_maximum_age:
       type: integer
       label: 'Maximum age for temporary files'
+    filename_transliteration:
+      type: boolean
+      label: 'Transliterate names of uploaded files'
 
 system.image:
   type: config_object
diff --git a/core/modules/system/src/Form/FileSystemForm.php b/core/modules/system/src/Form/FileSystemForm.php
index 6ac279a4c0..5b77820d68 100644
--- a/core/modules/system/src/Form/FileSystemForm.php
+++ b/core/modules/system/src/Form/FileSystemForm.php
@@ -143,6 +143,13 @@ public function buildForm(array $form, FormStateInterface $form_state) {
       '#description' => t('Temporary files are not referenced, but are in the file system and therefore may show up in administrative lists. <strong>Warning:</strong> If enabled, temporary files will be permanently deleted and may not be recoverable.'),
     ];
 
+    $form['filename_transliteration'] = [
+      '#type' => 'checkbox',
+      '#title' => t('Enable filename transliteration'),
+      '#default_value' => $config->get('filename_transliteration'),
+      '#description' => t('Transliteration ensures that filenames do not contain unicode characters.'),
+    ];
+
     return parent::buildForm($form, $form_state);
   }
 
@@ -151,7 +158,8 @@ public function buildForm(array $form, FormStateInterface $form_state) {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $config = $this->config('system.file')
-      ->set('temporary_maximum_age', $form_state->getValue('temporary_maximum_age'));
+      ->set('temporary_maximum_age', $form_state->getValue('temporary_maximum_age'))
+      ->set('filename_transliteration', (bool) $form_state->getValue('filename_transliteration'));
 
     if ($form_state->hasValue('file_default_scheme')) {
       $config->set('default_scheme', $form_state->getValue('file_default_scheme'));
diff --git a/core/modules/system/tests/src/Kernel/Migrate/d6/MigrateSystemConfigurationTest.php b/core/modules/system/tests/src/Kernel/Migrate/d6/MigrateSystemConfigurationTest.php
index 77dba8e29b..994dbdb6c2 100644
--- a/core/modules/system/tests/src/Kernel/Migrate/d6/MigrateSystemConfigurationTest.php
+++ b/core/modules/system/tests/src/Kernel/Migrate/d6/MigrateSystemConfigurationTest.php
@@ -49,6 +49,8 @@ class MigrateSystemConfigurationTest extends MigrateDrupal6TestBase {
       'default_scheme' => 'public',
       // temporary_maximum_age is not handled by the migration.
       'temporary_maximum_age' => 21600,
+      // filename_transliteration is not handled by migration.
+      'filename_transliteration' => FALSE,
     ],
     'system.image.gd' => [
       'jpeg_quality' => 75,
diff --git a/core/modules/system/tests/src/Kernel/Migrate/d7/MigrateSystemConfigurationTest.php b/core/modules/system/tests/src/Kernel/Migrate/d7/MigrateSystemConfigurationTest.php
index 71fb146c56..8da5b51d8f 100644
--- a/core/modules/system/tests/src/Kernel/Migrate/d7/MigrateSystemConfigurationTest.php
+++ b/core/modules/system/tests/src/Kernel/Migrate/d7/MigrateSystemConfigurationTest.php
@@ -47,6 +47,8 @@ class MigrateSystemConfigurationTest extends MigrateDrupal7TestBase {
       'default_scheme' => 'public',
       // temporary_maximum_age is not handled by the migration.
       'temporary_maximum_age' => 21600,
+      // filename_transliteration is not handled by migration.
+      'filename_transliteration' => FALSE,
     ],
     'system.image.gd' => [
       'jpeg_quality' => 80,
